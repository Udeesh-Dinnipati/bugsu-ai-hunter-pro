
import { Badge } from "./ui/badge";
import { Button } from "./ui/button";
import { Card, CardContent } from "./ui/card";
import { FileText, ExternalLink, Shield, AlertTriangle } from "lucide-react";
import { ScanResult, Vulnerability } from "./UrlScanner";
import { toast } from "@/hooks/use-toast";
import { StatCard } from "./vulnerability/StatCard";
import { VulnerabilityCard } from "./vulnerability/VulnerabilityCard";
import { generateReportContent } from "./vulnerability/reportGenerator";

function getHighestSeverity(vulnerabilities: Vulnerability[]): string {
  if (vulnerabilities.length === 0) return "None";
  
  const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
  let highest = "low";
  
  vulnerabilities.forEach(vuln => {
    if (severityOrder[vuln.severity] > severityOrder[highest as keyof typeof severityOrder]) {
      highest = vuln.severity;
    }
  });
  
  return highest.charAt(0).toUpperCase() + highest.slice(1);
}

export default function VulnerabilityReport({ result, onSubmitReport }: { 
  result: ScanResult, 
  onSubmitReport: (vuln: Vulnerability) => void 
}) {
  const handleExportReport = () => {
    try {
      const reportContent = generateReportContent(result);
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      
      const downloadLink = document.createElement('a');
      downloadLink.href = url;
      downloadLink.download = `vulnerability-report-${new Date().toISOString().split('T')[0]}.txt`;
      
      document.body.appendChild(downloadLink);
      downloadLink.click();
      
      document.body.removeChild(downloadLink);
      URL.revokeObjectURL(url);
      
      toast({
        title: "Report Exported",
        description: "Your vulnerability report has been downloaded as a text file.",
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to export the report. Please try again.",
        variant: "destructive",
      });
      console.error("Export error:", error);
    }
  };

  return (
    <div className="w-full max-w-4xl mx-auto mt-10 space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h2 className="text-2xl font-bold">Vulnerability Report</h2>
          <p className="text-muted-foreground">
            Scan completed in {result.scanDuration} seconds on {new Date(result.scanDate).toLocaleString()}
          </p>
        </div>
        <Button 
          variant="outline" 
          className="flex gap-2 items-center"
          onClick={handleExportReport}
        >
          <FileText className="h-4 w-4" />
          Export Report
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <StatCard 
          title="Scanned URL" 
          value={result.url} 
          icon={<ExternalLink className="h-5 w-5 text-muted-foreground" />} 
        />
        <StatCard 
          title="Vulnerabilities" 
          value={result.vulnerabilities.length.toString()} 
          icon={<Shield className="h-5 w-5 text-muted-foreground" />} 
        />
        <StatCard 
          title="Highest Severity" 
          value={getHighestSeverity(result.vulnerabilities)} 
          icon={<AlertTriangle className="h-5 w-5 text-muted-foreground" />} 
        />
      </div>

      {result.vulnerabilities.length > 0 ? (
        <div className="space-y-4">
          <h3 className="text-xl font-semibold">Detected Vulnerabilities</h3>
          <div className="space-y-4">
            {result.vulnerabilities.map((vuln) => (
              <VulnerabilityCard key={vuln.id} vulnerability={vuln} onSubmit={onSubmitReport} />
            ))}
          </div>
        </div>
      ) : (
        <Card>
          <CardContent className="pt-6 text-center">
            <div className="flex justify-center mb-4">
              <Shield className="h-16 w-16 text-green-500" />
            </div>
            <h3 className="text-xl font-semibold">No Vulnerabilities Detected</h3>
            <p className="text-muted-foreground mt-2">
              The scanned website appears to be secure based on our tests. Keep in mind that this doesn't guarantee complete security.
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
