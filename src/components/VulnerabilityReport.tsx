
import { Badge } from "./ui/badge";
import { Button } from "./ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "./ui/card";
import { Copy, ExternalLink, FileText, Shield, AlertTriangle, Info, CheckCircle, XCircle } from "lucide-react";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "./ui/accordion";
import { ScanResult, Vulnerability } from "./UrlScanner";
import { useState } from "react";
import { cn } from "@/lib/utils";
import { toast } from "@/hooks/use-toast";

export default function VulnerabilityReport({ result, onSubmitReport }: { 
  result: ScanResult, 
  onSubmitReport: (vuln: Vulnerability) => void 
}) {
  const handleExportReport = () => {
    try {
      // Create report content
      const reportContent = generateReportContent(result);
      
      // Create blob and download link
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      
      // Create download element
      const downloadLink = document.createElement('a');
      downloadLink.href = url;
      downloadLink.download = `vulnerability-report-${new Date().toISOString().split('T')[0]}.txt`;
      
      // Trigger download
      document.body.appendChild(downloadLink);
      downloadLink.click();
      
      // Clean up
      document.body.removeChild(downloadLink);
      URL.revokeObjectURL(url);
      
      toast({
        title: "Report Exported",
        description: "Your vulnerability report has been downloaded as a text file.",
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to export the report. Please try again.",
        variant: "destructive",
      });
      console.error("Export error:", error);
    }
  };
  
  const generateReportContent = (result: ScanResult): string => {
    let content = `VULNERABILITY REPORT\n`;
    content += `==================\n\n`;
    content += `URL: ${result.url}\n`;
    content += `Scan Date: ${new Date(result.scanDate).toLocaleString()}\n`;
    content += `Scan Duration: ${result.scanDuration} seconds\n`;
    content += `Total Vulnerabilities: ${result.vulnerabilities.length}\n\n`;
    
    if (result.vulnerabilities.length === 0) {
      content += `No vulnerabilities were detected.\n`;
    } else {
      content += `DETECTED VULNERABILITIES\n`;
      content += `========================\n\n`;
      
      result.vulnerabilities.forEach((vuln, index) => {
        content += `[${index + 1}] ${vuln.name}\n`;
        content += `Severity: ${vuln.severity.toUpperCase()}\n`;
        content += `CWE ID: ${vuln.cweId}\n`;
        content += `Affected URL: ${vuln.affectedUrl}\n`;
        content += `Description: ${vuln.description}\n\n`;
        
        content += `Steps to Reproduce:\n`;
        vuln.stepsToReproduce.forEach((step, stepIndex) => {
          content += `${stepIndex + 1}. ${step}\n`;
        });
        
        content += `\nExploit Suggestion: ${vuln.exploitSuggestion}\n`;
        content += `Legal Status: ${vuln.isLegal ? 'Safe to test' : 'Caution required'}\n`;
        if (!vuln.isLegal && vuln.legalNotes) {
          content += `Legal Notes: ${vuln.legalNotes}\n`;
        }
        content += `\n${'-'.repeat(50)}\n\n`;
      });
    }
    
    content += `Report generated by BugSU - The AI-Powered Bug Hunter\n`;
    content += `Â© ${new Date().getFullYear()} BugSU. Ethical Bug Hunting Platform.`;
    
    return content;
  };

  return (
    <div className="w-full max-w-4xl mx-auto mt-10 space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h2 className="text-2xl font-bold">Vulnerability Report</h2>
          <p className="text-muted-foreground">
            Scan completed in {result.scanDuration} seconds on {new Date(result.scanDate).toLocaleString()}
          </p>
        </div>
        <Button 
          variant="outline" 
          className="flex gap-2 items-center"
          onClick={handleExportReport}
        >
          <FileText className="h-4 w-4" />
          Export Report
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <StatCard 
          title="Scanned URL" 
          value={result.url} 
          icon={<ExternalLink className="h-5 w-5 text-muted-foreground" />} 
        />
        <StatCard 
          title="Vulnerabilities" 
          value={result.vulnerabilities.length.toString()} 
          icon={<Shield className="h-5 w-5 text-muted-foreground" />} 
        />
        <StatCard 
          title="Highest Severity" 
          value={getHighestSeverity(result.vulnerabilities)} 
          icon={<AlertTriangle className="h-5 w-5 text-muted-foreground" />} 
        />
      </div>

      {result.vulnerabilities.length > 0 ? (
        <div className="space-y-4">
          <h3 className="text-xl font-semibold">Detected Vulnerabilities</h3>
          <div className="space-y-4">
            {result.vulnerabilities.map((vuln) => (
              <VulnerabilityCard key={vuln.id} vulnerability={vuln} onSubmit={onSubmitReport} />
            ))}
          </div>
        </div>
      ) : (
        <Card>
          <CardContent className="pt-6 text-center">
            <div className="flex justify-center mb-4">
              <Shield className="h-16 w-16 text-green-500" />
            </div>
            <h3 className="text-xl font-semibold">No Vulnerabilities Detected</h3>
            <p className="text-muted-foreground mt-2">
              The scanned website appears to be secure based on our tests. Keep in mind that this doesn't guarantee complete security.
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

function getHighestSeverity(vulnerabilities: Vulnerability[]): string {
  if (vulnerabilities.length === 0) return "None";
  
  const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
  let highest = "low";
  
  vulnerabilities.forEach(vuln => {
    if (severityOrder[vuln.severity] > severityOrder[highest as keyof typeof severityOrder]) {
      highest = vuln.severity;
    }
  });
  
  return highest.charAt(0).toUpperCase() + highest.slice(1);
}

function StatCard({ title, value, icon }: { title: string, value: string, icon: React.ReactNode }) {
  return (
    <Card>
      <CardContent className="pt-6">
        <div className="flex justify-between items-start">
          <div>
            <p className="text-sm text-muted-foreground">{title}</p>
            <p className="text-2xl font-semibold mt-1">{value}</p>
          </div>
          <div>
            {icon}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

function VulnerabilityCard({ vulnerability, onSubmit }: { 
  vulnerability: Vulnerability, 
  onSubmit: (vuln: Vulnerability) => void 
}) {
  const [expanded, setExpanded] = useState(false);
  
  const severityColors = {
    low: "bg-blue-500/10 text-blue-500 border-blue-500/20",
    medium: "bg-yellow-500/10 text-yellow-500 border-yellow-500/20",
    high: "bg-orange-500/10 text-orange-500 border-orange-500/20",
    critical: "bg-red-500/10 text-red-500 border-red-500/20"
  };

  const handleCopyToClipboard = () => {
    const text = `
Vulnerability Report for ${vulnerability.affectedUrl}
Name: ${vulnerability.name}
Severity: ${vulnerability.severity}
CWE ID: ${vulnerability.cweId}
Description: ${vulnerability.description}
Steps to Reproduce:
${vulnerability.stepsToReproduce.map((step, i) => `${i+1}. ${step}`).join('\n')}
`;
    
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied to clipboard",
      description: "Vulnerability details have been copied to your clipboard."
    });
  };

  return (
    <Card className={`border-l-4 ${severityColors[vulnerability.severity]}`}>
      <CardHeader className="pb-2">
        <div className="flex justify-between">
          <div className="flex items-center gap-2">
            <Badge variant="outline" className={severityColors[vulnerability.severity]}>
              {vulnerability.severity.toUpperCase()}
            </Badge>
            <Badge variant="outline">{vulnerability.cweId}</Badge>
          </div>
          {vulnerability.isLegal ? (
            <Badge variant="outline" className="bg-green-500/10 text-green-500 border-green-500/20">
              <CheckCircle className="h-3 w-3 mr-1" />
              Legal to Test
            </Badge>
          ) : (
            <Badge variant="outline" className="bg-red-500/10 text-red-500 border-red-500/20">
              <XCircle className="h-3 w-3 mr-1" />
              Caution Required
            </Badge>
          )}
        </div>
        <CardTitle className="text-lg">{vulnerability.name}</CardTitle>
        <CardDescription className="text-sm truncate">
          Affects: {vulnerability.affectedUrl}
        </CardDescription>
      </CardHeader>
      <CardContent className="pb-2">
        <Accordion type="single" collapsible value={expanded ? "item-1" : ""} onValueChange={(v) => setExpanded(v === "item-1")}>
          <AccordionItem value="item-1" className="border-b-0">
            <AccordionTrigger className="py-2">
              <span className="text-sm font-normal">View Details</span>
            </AccordionTrigger>
            <AccordionContent>
              <div className="space-y-4 text-sm">
                <div>
                  <h4 className="font-medium mb-1 flex items-center gap-2">
                    <Info className="h-4 w-4" /> Description
                  </h4>
                  <p className="text-muted-foreground">{vulnerability.description}</p>
                </div>
                
                <div>
                  <h4 className="font-medium mb-1 flex items-center gap-2">
                    <AlertTriangle className="h-4 w-4" /> Steps to Reproduce
                  </h4>
                  <ol className="list-decimal pl-5 text-muted-foreground">
                    {vulnerability.stepsToReproduce.map((step, index) => (
                      <li key={index}>{step}</li>
                    ))}
                  </ol>
                </div>
                
                <div className={cn(
                  "p-3 rounded-md font-mono text-xs",
                  vulnerability.isLegal ? "bg-green-500/5 border border-green-500/10" : "bg-red-500/5 border border-red-500/10"
                )}>
                  <h4 className="font-medium mb-1 flex items-center gap-2">
                    <Shield className="h-4 w-4" /> Legal Status
                  </h4>
                  <p className="text-muted-foreground">
                    {vulnerability.isLegal 
                      ? "This vulnerability appears safe to test and report under typical responsible disclosure practices." 
                      : vulnerability.legalNotes || "Exercise caution when testing. Review target's security policy before proceeding."}
                  </p>
                </div>
                
                <div className="bg-bugsu-purple/5 border border-bugsu-purple/20 p-3 rounded-md">
                  <h4 className="font-medium mb-1">AI Exploit Suggestion</h4>
                  <p className="text-muted-foreground">{vulnerability.exploitSuggestion}</p>
                </div>
              </div>
            </AccordionContent>
          </AccordionItem>
        </Accordion>
      </CardContent>
      <CardFooter className="flex justify-between pt-2">
        <Button variant="outline" size="sm" onClick={handleCopyToClipboard}>
          <Copy className="h-3 w-3 mr-1" />
          Copy
        </Button>
        <Button onClick={() => onSubmit(vulnerability)} size="sm" className="bg-bugsu-purple hover:bg-bugsu-purple/90 text-white">
          Submit Report
        </Button>
      </CardFooter>
    </Card>
  );
}
