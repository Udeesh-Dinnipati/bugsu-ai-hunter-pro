
import { useState } from "react";
import { Badge } from "../ui/badge";
import { Button } from "../ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "../ui/card";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "../ui/accordion";
import { Copy, Shield, Info, AlertTriangle, CheckCircle, XCircle } from "lucide-react";
import { cn } from "@/lib/utils";
import { toast } from "@/hooks/use-toast";
import { Vulnerability } from "../UrlScanner";

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
  onSubmit: (vuln: Vulnerability) => void;
}

export function VulnerabilityCard({ vulnerability, onSubmit }: VulnerabilityCardProps) {
  const [expanded, setExpanded] = useState(false);
  
  const severityColors = {
    low: "bg-blue-500/10 text-blue-500 border-blue-500/20",
    medium: "bg-yellow-500/10 text-yellow-500 border-yellow-500/20",
    high: "bg-orange-500/10 text-orange-500 border-orange-500/20",
    critical: "bg-red-500/10 text-red-500 border-red-500/20"
  };

  const handleCopyToClipboard = () => {
    const text = `
Vulnerability Report for ${vulnerability.affectedUrl}
Name: ${vulnerability.name}
Severity: ${vulnerability.severity}
CWE ID: ${vulnerability.cweId}
Description: ${vulnerability.description}
Steps to Reproduce:
${vulnerability.stepsToReproduce.map((step, i) => `${i+1}. ${step}`).join('\n')}
`;
    
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied to clipboard",
      description: "Vulnerability details have been copied to your clipboard."
    });
  };

  return (
    <Card className={`border-l-4 ${severityColors[vulnerability.severity]}`}>
      <CardHeader className="pb-2">
        <div className="flex justify-between">
          <div className="flex items-center gap-2">
            <Badge variant="outline" className={severityColors[vulnerability.severity]}>
              {vulnerability.severity.toUpperCase()}
            </Badge>
            <Badge variant="outline">{vulnerability.cweId}</Badge>
          </div>
          {vulnerability.isLegal ? (
            <Badge variant="outline" className="bg-green-500/10 text-green-500 border-green-500/20">
              <CheckCircle className="h-3 w-3 mr-1" />
              Legal to Test
            </Badge>
          ) : (
            <Badge variant="outline" className="bg-red-500/10 text-red-500 border-red-500/20">
              <XCircle className="h-3 w-3 mr-1" />
              Caution Required
            </Badge>
          )}
        </div>
        <CardTitle className="text-lg">{vulnerability.name}</CardTitle>
        <CardDescription className="text-sm truncate">
          Affects: {vulnerability.affectedUrl}
        </CardDescription>
      </CardHeader>
      <CardContent className="pb-2">
        <Accordion type="single" collapsible value={expanded ? "item-1" : ""} onValueChange={(v) => setExpanded(v === "item-1")}>
          <AccordionItem value="item-1" className="border-b-0">
            <AccordionTrigger className="py-2">
              <span className="text-sm font-normal">View Details</span>
            </AccordionTrigger>
            <AccordionContent>
              <div className="space-y-4 text-sm">
                <div>
                  <h4 className="font-medium mb-1 flex items-center gap-2">
                    <Info className="h-4 w-4" /> Description
                  </h4>
                  <p className="text-muted-foreground">{vulnerability.description}</p>
                </div>
                
                <div>
                  <h4 className="font-medium mb-1 flex items-center gap-2">
                    <AlertTriangle className="h-4 w-4" /> Steps to Reproduce
                  </h4>
                  <ol className="list-decimal pl-5 text-muted-foreground">
                    {vulnerability.stepsToReproduce.map((step, index) => (
                      <li key={index}>{step}</li>
                    ))}
                  </ol>
                </div>
                
                <div className={cn(
                  "p-3 rounded-md font-mono text-xs",
                  vulnerability.isLegal ? "bg-green-500/5 border border-green-500/10" : "bg-red-500/5 border border-red-500/10"
                )}>
                  <h4 className="font-medium mb-1 flex items-center gap-2">
                    <Shield className="h-4 w-4" /> Legal Status
                  </h4>
                  <p className="text-muted-foreground">
                    {vulnerability.isLegal 
                      ? "This vulnerability appears safe to test and report under typical responsible disclosure practices." 
                      : vulnerability.legalNotes || "Exercise caution when testing. Review target's security policy before proceeding."}
                  </p>
                </div>
                
                <div className="bg-bugsu-purple/5 border border-bugsu-purple/20 p-3 rounded-md">
                  <h4 className="font-medium mb-1">AI Exploit Suggestion</h4>
                  <p className="text-muted-foreground">{vulnerability.exploitSuggestion}</p>
                </div>
              </div>
            </AccordionContent>
          </AccordionItem>
        </Accordion>
      </CardContent>
      <CardFooter className="flex justify-between pt-2">
        <Button variant="outline" size="sm" onClick={handleCopyToClipboard}>
          <Copy className="h-3 w-3 mr-1" />
          Copy
        </Button>
        <Button onClick={() => onSubmit(vulnerability)} size="sm" className="bg-bugsu-purple hover:bg-bugsu-purple/90 text-white">
          Submit Report
        </Button>
      </CardFooter>
    </Card>
  );
}
