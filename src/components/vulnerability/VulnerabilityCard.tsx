
import { useState } from "react";
import { Badge } from "../ui/badge";
import { Button } from "../ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "../ui/card";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "../ui/accordion";
import { Copy, Shield, Info, AlertTriangle, CheckCircle, XCircle, ChevronDown } from "lucide-react";
import { cn } from "@/lib/utils";
import { toast } from "@/hooks/use-toast";
import { Vulnerability } from "../UrlScanner";
import { AssetStep } from "./steps/AssetStep";
import { WeaknessStep } from "./steps/WeaknessStep";
import { SeverityStep } from "./steps/SeverityStep";
import { PocStep } from "./steps/PocStep";
import { PayloadStep } from "./steps/PayloadStep";
import { ReviewStep } from "./steps/ReviewStep";

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
  onSubmit: (vuln: Vulnerability) => void;
}

export function VulnerabilityCard({ vulnerability, onSubmit }: VulnerabilityCardProps) {
  const [expanded, setExpanded] = useState(false);
  // Wizard state for each vuln
  const [step, setStep] = useState(0);
  const [asset, setAsset] = useState("");
  const [weakness, setWeakness] = useState(vulnerability.name || "");
  const [severity, setSeverity] = useState(vulnerability.severity || "");
  const [pocTitle, setPocTitle] = useState("");
  const [pocDesc, setPocDesc] = useState("");
  const [pocImpact, setPocImpact] = useState("");
  const [payload, setPayload] = useState("");

  // Move to next/prev step helpers
  const canContinue =
    (step === 0 && asset) ||
    (step === 1 && weakness) ||
    (step === 2 && severity) ||
    (step === 3 && pocTitle && pocDesc && pocImpact) ||
    (step === 4 && payload) ||
    step === 5;

  const nextStep = () => canContinue && setStep(s => s + 1);
  const prevStep = () => setStep(s => s - 1);

  const severityColors = {
    low: "bg-blue-500/10 text-blue-500 border-blue-500/20",
    medium: "bg-yellow-500/10 text-yellow-500 border-yellow-500/20",
    high: "bg-orange-500/10 text-orange-500 border-orange-500/20",
    critical: "bg-red-500/10 text-red-500 border-red-500/20"
  };

  const handleCopyToClipboard = () => {
    const text = `
Vulnerability Report for ${vulnerability.affectedUrl}
Name: ${vulnerability.name}
Severity: ${vulnerability.severity}
CWE ID: ${vulnerability.cweId}
Description: ${vulnerability.description}
Steps to Reproduce:
${vulnerability.stepsToReproduce.map((step, i) => `${i+1}. ${step}`).join('\n')}
    `;
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied to clipboard",
      description: "Vulnerability details have been copied to your clipboard."
    });
  };

  // Prepare submitted vuln structure with new info
  const handleSubmitInline = () => {
    const enhancedVuln = {
      ...vulnerability,
      asset,
      weakness,
      severity,
      poc: { title: pocTitle, desc: pocDesc, impact: pocImpact },
      payload,
    };
    toast({
      title: "Report Submitted",
      description: "Your vulnerability report has been submitted.",
    });
    onSubmit(enhancedVuln);
    setExpanded(false);
    setStep(0);
    setAsset("");
    setWeakness(vulnerability.name || "");
    setSeverity(vulnerability.severity || "");
    setPocTitle("");
    setPocDesc("");
    setPocImpact("");
    setPayload("");
  };

  // Step descriptions
  const stepDescriptions = [
    "Select the main attack surface (Asset) for this issue.",
    "Choose the Weakness - the type of discovered vulnerability.",
    "Estimate the Severity of this vulnerability.",
    "Fill in Proof of Concept: title, description, and impact.",
    "Suggest a payload to demonstrate the issue.",
    "Review and confirm report details before submitting.",
  ];

  // Show step components inline
  const renderStepper = () => (
    <div className="space-y-6 py-4">
      <div className="text-xs text-muted-foreground">{stepDescriptions[step]}</div>
      <div>
        {step === 0 && <AssetStep asset={asset} setAsset={setAsset} />}
        {step === 1 && <WeaknessStep weakness={weakness} setWeakness={setWeakness} />}
        {step === 2 && <SeverityStep severity={severity} setSeverity={setSeverity} />}
        {step === 3 && (
          <PocStep
            pocTitle={pocTitle} setPocTitle={setPocTitle}
            pocDesc={pocDesc} setPocDesc={setPocDesc}
            pocImpact={pocImpact} setPocImpact={setPocImpact}
          />
        )}
        {step === 4 && <PayloadStep payload={payload} setPayload={setPayload} />}
        {step === 5 && (
          <ReviewStep
            asset={asset}
            weakness={weakness}
            severity={severity}
            pocTitle={pocTitle}
            pocDesc={pocDesc}
            pocImpact={pocImpact}
            payload={payload}
          />
        )}
      </div>
      <div className="flex gap-2 justify-end">
        {step > 0 && (
          <Button variant="outline" size="sm" onClick={prevStep}>
            Back
          </Button>
        )}
        {step < 5 && (
          <Button
            size="sm"
            onClick={nextStep}
            disabled={!canContinue}
            className="bg-bugsu-purple text-white"
          >
            Next
          </Button>
        )}
        {step === 5 && (
          <Button
            size="sm"
            className="bg-bugsu-purple text-white"
            onClick={handleSubmitInline}
            disabled={!canContinue}
          >
            Submit Report
          </Button>
        )}
      </div>
      {step === 5 && (
        <div className="text-xs mt-2 text-muted-foreground">
          Please review your report details before submitting; editing after submission is not possible.
        </div>
      )}
    </div>
  );

  return (
    <Card className={`border-l-4 ${severityColors[vulnerability.severity]}`}>
      <CardHeader className="pb-2">
        <div className="flex justify-between">
          <div className="flex items-center gap-2">
            <Badge variant="outline" className={severityColors[vulnerability.severity]}>
              {vulnerability.severity.toUpperCase()}
            </Badge>
            <Badge variant="outline">{vulnerability.cweId}</Badge>
          </div>
          {vulnerability.isLegal ? (
            <Badge variant="outline" className="bg-green-500/10 text-green-500 border-green-500/20">
              <CheckCircle className="h-3 w-3 mr-1" />
              Legal to Test
            </Badge>
          ) : (
            <Badge variant="outline" className="bg-red-500/10 text-red-500 border-red-500/20">
              <XCircle className="h-3 w-3 mr-1" />
              Caution Required
            </Badge>
          )}
        </div>
        <CardTitle className="text-lg flex justify-between items-center">
          {vulnerability.name}
          <button
            className="ml-2 rounded hover:bg-muted/50 p-1 transition"
            aria-label="Expand details"
            onClick={() => setExpanded((v) => !v)}
          >
            <ChevronDown className={cn("h-5 w-5 transition-transform", expanded && "rotate-180")} />
          </button>
        </CardTitle>
        <CardDescription className="text-sm truncate">
          Affects: {vulnerability.affectedUrl}
        </CardDescription>
      </CardHeader>
      <CardContent className="pb-2">
        {!expanded && (
          <Accordion type="single" collapsible value={""}>
            <AccordionItem value="item-1" className="border-b-0">
              <AccordionTrigger className="py-2">
                <span className="text-sm font-normal">View Details</span>
              </AccordionTrigger>
              <AccordionContent>
                <div className="space-y-4 text-sm">
                  <div>
                    <h4 className="font-medium mb-1 flex items-center gap-2">
                      <Info className="h-4 w-4" /> Description
                    </h4>
                    <p className="text-muted-foreground">{vulnerability.description}</p>
                  </div>

                  <div>
                    <h4 className="font-medium mb-1 flex items-center gap-2">
                      <AlertTriangle className="h-4 w-4" /> Steps to Reproduce
                    </h4>
                    <ol className="list-decimal pl-5 text-muted-foreground">
                      {vulnerability.stepsToReproduce.map((step, index) => (
                        <li key={index}>{step}</li>
                      ))}
                    </ol>
                  </div>

                  <div className={cn(
                    "p-3 rounded-md font-mono text-xs",
                    vulnerability.isLegal ? "bg-green-500/5 border border-green-500/10" : "bg-red-500/5 border border-red-500/10"
                  )}>
                    <h4 className="font-medium mb-1 flex items-center gap-2">
                      <Shield className="h-4 w-4" /> Legal Status
                    </h4>
                    <p className="text-muted-foreground">
                      {vulnerability.isLegal
                        ? "This vulnerability appears safe to test and report under typical responsible disclosure practices."
                        : vulnerability.legalNotes || "Exercise caution when testing. Review target's security policy before proceeding."}
                    </p>
                  </div>

                  <div className="bg-bugsu-purple/5 border border-bugsu-purple/20 p-3 rounded-md">
                    <h4 className="font-medium mb-1">AI Exploit Suggestion</h4>
                    <p className="text-muted-foreground">{vulnerability.exploitSuggestion}</p>
                  </div>
                </div>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        )}
        {expanded && renderStepper()}
      </CardContent>
      <CardFooter className="flex justify-between pt-2">
        <Button variant="outline" size="sm" onClick={handleCopyToClipboard}>
          <Copy className="h-3 w-3 mr-1" />
          Copy
        </Button>
        {/* Remove old submit here. Submission is handled through inline stepper */}
      </CardFooter>
    </Card>
  );
}

