
import { useState } from "react";
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle, DialogDescription } from "../ui/dialog";
import { Button } from "../ui/button";
import { Input } from "../ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";
import { Textarea } from "../ui/textarea";
import { Vulnerability } from "../UrlScanner";

const attackSurfaces = [
  "Web (Application/Endpoint)",
  "API",
  "Mobile",
  "Cloud/Infra",
  "Other"
];

const weaknesses = [
  "Cross-Site Scripting (XSS)",
  "SQL Injection",
  "CSRF",
  "Insecure Direct Object Reference",
  "Missing Authentication",
  "Sensitive Data Exposure",
  "Other"
];

const severities = ["low", "medium", "high", "critical"];

interface ModalProps {
  isOpen: boolean;
  vulnerability: Vulnerability | null;
  onClose: () => void;
  onSubmit: (enhancedVuln: any) => void;
}

export default function VulnerabilityReportModal({ isOpen, vulnerability, onClose, onSubmit }: ModalProps) {
  const [step, setStep] = useState(0);

  // Form state
  const [asset, setAsset] = useState("");
  const [weakness, setWeakness] = useState("");
  const [severity, setSeverity] = useState("");
  const [pocTitle, setPocTitle] = useState("");
  const [pocDesc, setPocDesc] = useState("");
  const [pocImpact, setPocImpact] = useState("");
  const [payload, setPayload] = useState("");

  // Populate defaults on open
  React.useEffect(() => {
    if (isOpen && vulnerability) {
      setAsset(""); setWeakness(""); setSeverity("");
      setPocTitle(""); setPocDesc(""); setPocImpact(""); setPayload("");
      setWeakness(vulnerability.name || "");
      setSeverity(vulnerability.severity || "");
    }
    if (!isOpen) setStep(0);
  }, [isOpen, vulnerability]);

  const canContinue =
    (step === 0 && asset) ||
    (step === 1 && weakness) ||
    (step === 2 && severity) ||
    (step === 3 && pocTitle && pocDesc && pocImpact) ||
    (step === 4 && payload) ||
    step === 5;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Report Vulnerability</DialogTitle>
          <DialogDescription>
            {step === 0 && "Select the main attack surface (Asset) for this issue."}
            {step === 1 && "Choose the Weakness - the type of discovered vulnerability."}
            {step === 2 && "Estimate the Severity of this vulnerability."}
            {step === 3 && "Fill in Proof of Concept: title, description, and impact."}
            {step === 4 && "Suggest a payload to demonstrate the issue."}
            {step === 5 && "Review and confirm report details before submitting."}
          </DialogDescription>
        </DialogHeader>

        {/* Stepper/steps */}
        <div className="flex flex-col gap-6 py-4 min-h-40">
          {step === 0 && (
            <div>
              <label className="block mb-2 font-semibold">Asset <span className="text-red-500">*</span></label>
              <Select value={asset} onValueChange={setAsset}>
                <SelectTrigger>
                  <SelectValue placeholder="Select asset" />
                </SelectTrigger>
                <SelectContent>
                  {attackSurfaces.map((option) => (
                    <SelectItem key={option} value={option}>{option}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          )}

          {step === 1 && (
            <div>
              <label className="block mb-2 font-semibold">Weakness <span className="text-red-500">*</span></label>
              <Select value={weakness} onValueChange={setWeakness}>
                <SelectTrigger>
                  <SelectValue placeholder="Select weakness" />
                </SelectTrigger>
                <SelectContent>
                  {weaknesses.map((option) => (
                    <SelectItem key={option} value={option}>{option}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          )}

          {step === 2 && (
            <div>
              <label className="block mb-2 font-semibold">Severity <span className="text-red-500">*</span></label>
              <Select value={severity} onValueChange={setSeverity}>
                <SelectTrigger>
                  <SelectValue placeholder="Select severity" />
                </SelectTrigger>
                <SelectContent>
                  {severities.map((level) => (
                    <SelectItem key={level} value={level}>{level.charAt(0).toUpperCase() + level.slice(1)}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          )}

          {step === 3 && (
            <div className="space-y-3">
              <div>
                <label className="block mb-1 font-semibold">Proof of Concept Title <span className="text-red-500">*</span></label>
                <Input value={pocTitle} onChange={e => setPocTitle(e.target.value)} placeholder="Descriptive PoC title" />
              </div>
              <div>
                <label className="block mb-1 font-semibold">Description <span className="text-red-500">*</span></label>
                <Textarea value={pocDesc} onChange={e => setPocDesc(e.target.value)} rows={2} placeholder="Step-by-step description for reproduction" />
              </div>
              <div>
                <label className="block mb-1 font-semibold">Impact <span className="text-red-500">*</span></label>
                <Textarea value={pocImpact} onChange={e => setPocImpact(e.target.value)} rows={2} placeholder="Describe the impact of this exploit" />
              </div>
            </div>
          )}

          {step === 4 && (
            <div>
              <label className="block mb-2 font-semibold">Suggest a payload <span className="text-red-500">*</span></label>
              <Textarea value={payload} onChange={e => setPayload(e.target.value)} rows={2} placeholder="Enter payload to demonstrate vulnerability" />
            </div>
          )}

          {step === 5 && (
            <div className="space-y-4">
              <div>
                <strong>Asset:</strong> {asset}
              </div>
              <div>
                <strong>Weakness:</strong> {weakness}
              </div>
              <div>
                <strong>Severity:</strong> {severity}
              </div>
              <div>
                <strong>Proof of Concept:</strong>
                <ul className="ml-4 mt-1 space-y-1 text-sm">
                  <li><b>Title:</b> {pocTitle}</li>
                  <li><b>Description:</b> {pocDesc}</li>
                  <li><b>Impact:</b> {pocImpact}</li>
                </ul>
              </div>
              <div>
                <strong>Suggested Payload:</strong>
                <p className="break-words">{payload}</p>
              </div>
            </div>
          )}
        </div>

        <DialogFooter>
          {step > 0 && (
            <Button variant="outline" onClick={() => setStep(s => s - 1)}>Back</Button>
          )}
          {step < 5 && (
            <Button onClick={() => canContinue && setStep(s => s + 1)} disabled={!canContinue}>Next</Button>
          )}
          {step === 5 && (
            <Button
              className="bg-bugsu-purple text-white"
              onClick={() => {
                onSubmit({
                  ...vulnerability,
                  asset,
                  weakness,
                  severity,
                  poc: { title: pocTitle, desc: pocDesc, impact: pocImpact },
                  payload,
                });
                onClose();
              }}
              disabled={!canContinue}
            >
              Submit Report
            </Button>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
