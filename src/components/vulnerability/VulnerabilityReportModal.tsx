
import React from "react";
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle, DialogDescription } from "../ui/dialog";
import { Button } from "../ui/button";
import { Vulnerability } from "../UrlScanner";
import { AssetStep } from "./steps/AssetStep";
import { WeaknessStep } from "./steps/WeaknessStep";
import { SeverityStep } from "./steps/SeverityStep";
import { PocStep } from "./steps/PocStep";
import { PayloadStep } from "./steps/PayloadStep";
import { ReviewStep } from "./steps/ReviewStep";
import { useVulnerabilityForm } from "./hooks/useVulnerabilityForm";

interface ModalProps {
  isOpen: boolean;
  vulnerability: Vulnerability | null;
  onClose: () => void;
  onSubmit: (enhancedVuln: any) => void;
}

export default function VulnerabilityReportModal({ isOpen, vulnerability, onClose, onSubmit }: ModalProps) {
  const { 
    step, 
    asset, setAsset,
    weakness, setWeakness,
    severity, setSeverity,
    pocTitle, setPocTitle,
    pocDesc, setPocDesc,
    pocImpact, setPocImpact,
    payload, setPayload,
    canContinue,
    nextStep,
    prevStep,
    getSubmissionData
  } = useVulnerabilityForm(isOpen, vulnerability);

  // Helper to get step description text
  const getStepDescription = () => {
    switch (step) {
      case 0: return "Select the main attack surface (Asset) for this issue.";
      case 1: return "Choose the Weakness - the type of discovered vulnerability.";
      case 2: return "Estimate the Severity of this vulnerability.";
      case 3: return "Fill in Proof of Concept: title, description, and impact.";
      case 4: return "Suggest a payload to demonstrate the issue.";
      case 5: return "Review and confirm report details before submitting.";
      default: return "";
    }
  };

  // Render current step content
  const renderStepContent = () => {
    switch (step) {
      case 0: return <AssetStep asset={asset} setAsset={setAsset} />;
      case 1: return <WeaknessStep weakness={weakness} setWeakness={setWeakness} />;
      case 2: return <SeverityStep severity={severity} setSeverity={setSeverity} />;
      case 3: return (
        <PocStep 
          pocTitle={pocTitle} setPocTitle={setPocTitle}
          pocDesc={pocDesc} setPocDesc={setPocDesc}
          pocImpact={pocImpact} setPocImpact={setPocImpact}
        />
      );
      case 4: return <PayloadStep payload={payload} setPayload={setPayload} />;
      case 5: return (
        <ReviewStep 
          asset={asset}
          weakness={weakness}
          severity={severity}
          pocTitle={pocTitle}
          pocDesc={pocDesc}
          pocImpact={pocImpact}
          payload={payload}
        />
      );
      default: return null;
    }
  };

  const handleSubmit = () => {
    onSubmit(getSubmissionData());
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Report Vulnerability</DialogTitle>
          <DialogDescription>{getStepDescription()}</DialogDescription>
        </DialogHeader>

        <div className="flex flex-col gap-6 py-4 min-h-40">
          {renderStepContent()}
        </div>

        <DialogFooter>
          {step > 0 && (
            <Button variant="outline" onClick={prevStep}>Back</Button>
          )}
          {step < 5 && (
            <Button onClick={nextStep} disabled={!canContinue}>Next</Button>
          )}
          {step === 5 && (
            <Button
              className="bg-bugsu-purple text-white"
              onClick={handleSubmit}
              disabled={!canContinue}
            >
              Submit Report
            </Button>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
