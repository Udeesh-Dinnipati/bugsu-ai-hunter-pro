import { useState } from "react";
import { Textarea } from "../../ui/textarea";
import { Button } from "../../ui/button";
import { Copy, Lightbulb } from "lucide-react";
import { toast } from "@/hooks/use-toast";

interface PayloadStepProps {
  payload: string;
  setPayload: (value: string) => void;
}

const examplePayloads = {
  "Cross-Site Scripting (XSS)": `<script>alert('XSS')</script>`,
  "SQL Injection": `' OR 1=1 --`,
  "CSRF": `<img src="https://evil.com/csrf?token=123" style="display:none">`,
  "Insecure Direct Object Reference": `https://example.com/account?id=ANOTHER_USER_ID`,
  "Missing Authentication": `https://example.com/admin/users`,
  "Sensitive Data Exposure": `https://example.com/api/users?debug=true`
};

export function PayloadStep({ payload, setPayload }: PayloadStepProps) {
  const [showExamples, setShowExamples] = useState(false);
  
  const handleSelectExample = (example: string) => {
    setPayload(example);
    toast({
      title: "Payload Applied",
      description: "Example payload has been applied. You can modify it as needed.",
    });
  };

  const handleCopyExample = (example: string) => {
    navigator.clipboard.writeText(example);
    toast({
      title: "Copied to Clipboard",
      description: "Example payload has been copied to your clipboard.",
    });
  };

  return (
    <div className="space-y-4">
      <div>
        <label className="block mb-2 font-semibold">
          Suggest a payload <span className="text-red-500">*</span>
        </label>
        <Textarea 
          value={payload} 
          onChange={e => setPayload(e.target.value)} 
          rows={3} 
          placeholder="Enter payload to demonstrate vulnerability" 
          className="font-mono text-sm"
        />
      </div>
      
      <Button 
        type="button" 
        variant="outline" 
        size="sm"
        className="flex items-center gap-2"
        onClick={() => setShowExamples(!showExamples)}
      >
        <Lightbulb className="h-4 w-4" />
        {showExamples ? "Hide Examples" : "Show Example Payloads"}
      </Button>
      
      {showExamples && (
        <div className="rounded-md border p-4 bg-muted/30 space-y-3">
          <h4 className="text-sm font-medium">Common Payload Examples</h4>
          <div className="space-y-3">
            {Object.entries(examplePayloads).map(([type, example]) => (
              <div key={type} className="space-y-1">
                <div className="flex justify-between items-center">
                  <h5 className="text-xs font-medium">{type}</h5>
                  <div className="flex gap-2">
                    <Button 
                      size="sm" 
                      variant="ghost" 
                      className="h-6 px-2 text-xs"
                      onClick={() => handleCopyExample(example)}
                    >
                      <Copy className="h-3 w-3 mr-1" /> Copy
                    </Button>
                    <Button 
                      size="sm" 
                      variant="ghost" 
                      className="h-6 px-2 text-xs text-bugsu-purple"
                      onClick={() => handleSelectExample(example)}
                    >
                      Use
                    </Button>
                  </div>
                </div>
                <code className="text-xs block p-2 bg-background border rounded">{example}</code>
              </div>
            ))}
          </div>
          <p className="text-xs text-muted-foreground mt-2">
            Note: These are simplified examples. Real exploits should be tested responsibly and with permission.
          </p>
        </div>
      )}
    </div>
  );
}